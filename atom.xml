<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YangK</title>
  
  <subtitle>Stay Hungry Stay Foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-16T13:35:51.413Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为第一家公司的入职做好准备~</title>
    <link href="http://yoursite.com/2019/07/14/%E4%B8%BA%E7%AC%AC%E4%B8%80%E5%AE%B6%E5%85%AC%E5%8F%B8%E7%9A%84%E5%85%A5%E8%81%8C%E5%81%9A%E5%A5%BD%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/2019/07/14/为第一家公司的入职做好准备/</id>
    <published>2019-07-14T13:47:45.000Z</published>
    <updated>2019-07-16T13:35:51.413Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;<strong>2019.7.16</strong>这是一个重要的日子，因为我即将以一个学生的身份转变成一个工作人士，在三年前的今天，谁曾想过，我会在三年之后成为那个人人口中常说的秃头、猝死、穿着花衬衫的程序员呢？为什么说 7.16 是一个重要的日子呢？因为在那天我就会入职新蛋作为新蛋公司的一份子(实习生)了，这也是我投了许多公司最后选择的结果，因为新蛋作为一家电商，是和”互联网”这个标签紧紧挂钩的，所以相信如果能在里面好好奋斗、努力，也一定能够得到很好的提升。其实之前在学校，因为正是招聘季，学校同学们都在奋力找工作，当听到认识的同学都进入头条、腾讯这类大厂，除了祝福其实也好生羡慕~，毕竟这类主流大厂的福利、工资、工作环境那一定也是互联网一流的水平，如果能进到这类公司那一定也对自身的成长有很大的提升，任谁都会想挤破头进去，所以我就是那个挤破头没进去的…，而现在即将入职的新蛋也是体量较大的电商公司了，总部是在美国加州，全球有2500名员工，公司发展有接近20年，内部体系也应当比较完善，相信对实习生也是相对友好的，虽说进入公司初步的实习生培养计划是C#开发，而在校我是主学的是Java，但其实这也并不要紧，因为语言终归是去解决业务的，只有接下来慢慢去掌握其他例如算法、网络等计算机基础才能真正的成为独当一面的工程师或更高的架构师..所以也希望入职后导师能够很好的引导我去学习C#开发，我也需要好好去探索这条C#开发之路，避免耽误太多的时间。<br>&emsp;&emsp;在 13 号这天我便搬到了接下来我即将常驻1年的公寓天府软件园D区，最初进入公寓宿舍还真是脏乱差…经过一番收拾也还看的过去，毕竟是免费的，也不能去要求什么~<br>&emsp;&emsp;目前宿舍：<br><img src="http://xianggan.027cgb.com/622253/%E7%94%9F%E6%B4%BB/P90715-104158.jpg" alt="公司宿舍"><br>&emsp;&emsp;宿舍夜景:<br><img src="http://xianggan.027cgb.com/622253/%E7%94%9F%E6%B4%BB/P90713-221833.jpg" alt="夜景"><br>&emsp;&emsp;然后宿舍当然最重要的还是舍友啦，通过简单的接触，室友们都还不错(虽然还有一位没到),所以也希望能在接下来的一年中，把自己做好和他们搞好关系、互相进步，今天(7.15)冒着大雨也完成了体检，成都果然是年轻力量聚集的城市，一路上全是好看的小姐姐~。明天就入职了，今天下午等室友到齐了去看看电影，吃吃晚饭，这也是作为学生时代的最后一嗨，好了，入职前大概就这么多。未来，我只希望自己能更加努力、遇见更多的挑战！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;2019.7.16&lt;/strong&gt;这是一个重要的日子，因为我即将以一个学生的身份转变成一个工作人士，在三年前的今天，谁曾想过，我会在三年之后成为那个人人口中常说的秃头、猝死、穿着花衬衫的程序员呢？为什么说 7.16 是一个重要的日子
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>记录常见问题</title>
    <link href="http://yoursite.com/2019/07/08/%E8%AE%B0%E5%BD%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/08/记录常见问题/</id>
    <published>2019-07-08T11:48:56.000Z</published>
    <updated>2019-07-14T14:02:09.335Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;<strong>这个模块主要是用来记录一些经常遇见的常见问题，以免每次遇见同样的问题都必须像第一次遇见一样重复处理。</strong></p><h3 id="一-hexo-博客迁移以及-github-同步"><a href="#一-hexo-博客迁移以及-github-同步" class="headerlink" title="一.hexo 博客迁移以及 github 同步"></a>一.hexo 博客迁移以及 github 同步</h3><h4 id="1-解决的问题"><a href="#1-解决的问题" class="headerlink" title="1.解决的问题:"></a>1.解决的问题:</h4><p>&emsp;&emsp;之前是通过hexo + gitpage 的方式来搭建的自己的博客，而后在想通过其他主机或者说自己的笔记本想重置或重装时，这时不得不保留hexo博客的必要文件以及将其<strong>迁移</strong>至新的主机并且需要和github上的博客项目进行<strong>同步</strong>。</p><h4 id="2-解决方式："><a href="#2-解决方式：" class="headerlink" title="2.解决方式："></a>2.解决方式：</h4><p>&emsp;&emsp;①迁移的解决:<a href="https://wungjyan.github.io/2018/08/17/move-hexo/" target="_blank" rel="noopener">迁移hexo</a>.<br>&emsp;&emsp;②同步的解决:<a href="https://blog.csdn.net/jingtingfengguo/article/details/51892864" target="_blank" rel="noopener">同步hexo到github</a>. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;这个模块主要是用来记录一些经常遇见的常见问题，以免每次遇见同样的问题都必须像第一次遇见一样重复处理。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-hexo-博客迁移以及-github-同步&quot;&gt;&lt;a href=&quot;#一-hexo-博客迁
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="解决问题的方式" scheme="http://yoursite.com/tags/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>动态规划题解</title>
    <link href="http://yoursite.com/2019/06/26/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2019/06/26/动态规划/</id>
    <published>2019-06-26T06:53:38.000Z</published>
    <updated>2019-07-14T14:01:23.517Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;<strong>写在前头：以前学习数据结构与算法，太囫囵吞枣，要么简单的直接按自己的思路写出来，然后就不再想看优秀的解法，要么就直接看解法，模仿的过一遍，也就有一些临时记忆。这便会产生一种错觉，感觉自己在短时间内学会了这个算法，其实不然，可能在过几天你连这个算法的思路都说不清楚。所以现在这个板块便记录自己每次学习的算法，做一个总结，也为了以后如果忘记了可以当作笔记查阅。</strong></p><h3 id="一、动态规划"><a href="#一、动态规划" class="headerlink" title="一、动态规划"></a><strong>一、动态规划</strong></h3><h4 id="1-动态规划的思想"><a href="#1-动态规划的思想" class="headerlink" title="1.动态规划的思想"></a>1.动态规划的<strong>思想</strong></h4><p>&emsp;&emsp;动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。我们可以用一个表来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。这就是动态规划法的基本思路。具体的动态规划算法多种多样，但它们具有相同的填表格式。</p><h4 id="2-动态规划应用"><a href="#2-动态规划应用" class="headerlink" title="2.动态规划应用"></a>2.动态规划应用</h4><p>&emsp;&emsp;在我接触的相关的算法中，求最优解、最大和、最短路径这类算法常用动态规划的思想来求解。</p><h3 id="二、动态规划的题解"><a href="#二、动态规划的题解" class="headerlink" title="二、动态规划的题解"></a><strong>二、动态规划的题解</strong></h3><h4 id="1-从斐波那契数列了解动态规划"><a href="#1-从斐波那契数列了解动态规划" class="headerlink" title="1.从斐波那契数列了解动态规划"></a>1.从斐波那契数列了解动态规划</h4><p>&emsp;&emsp;定义：斐波那契数列指的是：从一个数列的第三位数开始(第1位与第2位的值均为1)，每一位的值都等于前面两位的和。<br>&emsp;&emsp;如图为斐波那契数列：<br><img src="http://kan.027cgb.com/622253/TIM%E6%88%AA%E5%9B%BE20190626135258.png" alt="斐波那契数列定义"><br>&emsp;&emsp;那么我们如何求解斐波那契数列呢？很直观的根据数列的数值之间的关系，我会想到用递归的方式去求解。因为第一个数和第二个数默认为1，那么第三个数的值第一个数 + 第二个数，第四个数的值为 第二个数 + 第三个数，所以第n个数的值就为第 n - 1 个数 + 第 n - 2 个数。所以求第n项的和，就是求n-1项和n-2项的和。很明显是利用子问题求解的一个过程。<br>&emsp;&emsp;如图为使用递归推导斐波那契数列的过程：<br><img src="http://kan.027cgb.com/622253/TIM%E6%88%AA%E5%9B%BE20190626140755.png" alt="递归求斐波那契的推到式"><br>&emsp;&emsp;所以我们就可以利用递归式和递归的跳出条件来求出斐波那契数列的值了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 斐波那契数列递归方式求解</span></span><br><span class="line"><span class="comment">* time:2019.6.26</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//不满足斐波那契数列直接返回-1</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;好吧，如果是在以前，我做出了某个算法，我会很容易得到满足，但是现在，我用递归方式仅仅是求45的斐波那契数值，都等了三秒钟，这足可以看出递归的方式来求斐波那契是不合适的。<br>&emsp;&emsp;如图，可以看到递归求斐波那契的过程：<br><img src="http://kan.027cgb.com/622253/TIM%E6%88%AA%E5%9B%BE20190626142917.png" alt="递归求斐波那契的过程"><br>&emsp;&emsp;可以看出，圈红的递归式是重复的，并且重复是大量的，如果我们求7的斐波那契，那么整个6的斐波那契又会被重复的再次进行计算一次，所以递归的求解方式的时间复杂度是O(2的n次方)！我们现在可以考虑一个问题，因为子问题的结果会被后序计算使用到，那么为什么我们不把它给记录下来呢？而由于斐波那契的后序值只需要依赖于前两个数的和，所以我们每次将前两个数的和记录即可。而以这样的方式，我们只需要迭代一次数列即可，时间复杂度为O(n).<br>&emsp;&emsp;迭代记忆化的求解斐波那契：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 斐波那契数列迭代的方式</span></span><br><span class="line"><span class="comment">   * time:2019.6.26</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (n &lt; <span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//记录第一个值</span></span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">       <span class="comment">//记录第二个值</span></span><br><span class="line">       <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">       <span class="comment">//记录前两个值的和</span></span><br><span class="line">       <span class="keyword">int</span> val = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">           val = a + b;</span><br><span class="line">           a = b;</span><br><span class="line">           b = val;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> val;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;而以这样的方式，就算是求100,0000的斐波那契数值也在1秒内便得出了结果，所以，这便是同样的问题不同的解法产生的巨大的差异！而以这样的方式的求解过程，也有了一点DP思想的模子。</p><h4 id="2-求一个数组中不相邻的数值的和的最大值"><a href="#2-求一个数组中不相邻的数值的和的最大值" class="headerlink" title="2.求一个数组中不相邻的数值的和的最大值"></a>2.求一个数组中不相邻的数值的和的最大值</h4><p>&emsp;&emsp;如一个数组是这样的：[1,<strong>4</strong>,3,<strong>5</strong>],那么最后和为下标第1个4和下标第三个5组成最大值9.<br>&emsp;&emsp;通常在这种情况下，我会以最后一个数值从后往前进行一个推理。以[1,4,3,5]为例，当我们选择5这个数的时候，那么它就不能选择3而只能选择4以前的，而当我们不选择5的时候，那么就可以选择3了。<br>&emsp;&emsp;如图：<br><img src="http://kan.027cgb.com/622253/TIM%E6%88%AA%E5%9B%BE20190626160419.png" alt="分析过程"><br>&emsp;&emsp;<strong>递归的方式</strong>:<br>&emsp;&emsp;递归的<strong>跳出条件</strong>：<br>&emsp;&emsp;(1).当只有一个数时，那么该数就是最大值<br>&emsp;&emsp;(2).当有两个数时，那么选择两个数中较大的值为最大值<br>&emsp;&emsp;递归代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YangK</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span>: 2019/6/26 10:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 求不相邻的和的最大值,递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(array[<span class="number">0</span>],array[<span class="number">1</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> a = array[i] + solution(array,i - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> b = solution(array,i - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> Math.max(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;显然，以递归的方式仍然会存在函数多次重复计算的操作，所以我们应该保存已经得到结果的位置的值，那么利用迭代的方式可以实现。<br>&emsp;&emsp;<strong>非递归实现方式</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YangK</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span>: 2019/6/26 10:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 求不相邻的和的最大值,非递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution1</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (array.length == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (array.length == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(array[<span class="number">0</span>],array[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    array[<span class="number">0</span>] = array[<span class="number">0</span>];<span class="comment">//1个元素的最大值</span></span><br><span class="line">    array[<span class="number">1</span>] = Math.max(array[<span class="number">0</span>],array[<span class="number">1</span>]);<span class="comment">//2个元素的最大值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> val =  Math.max(array[i] + array[i - <span class="number">2</span>],array[i - <span class="number">1</span>]);</span><br><span class="line">        array[i] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array[array.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;通过迭代的方式，我们将每次计算产生的最大值放在当前迭代的位置，那么当我们计算数组的最后一位时，它就是整个过程的最大值。</p><h4 id="3-零钱兑换-leetCode-第322题"><a href="#3-零钱兑换-leetCode-第322题" class="headerlink" title="3.零钱兑换(leetCode 第322题)"></a>3.零钱兑换(leetCode 第322题)</h4><p>&emsp;&emsp;①题目描述: 给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。<br>&emsp;&emsp;首先要感谢在题解中 labuladong 这位用户对此题的详解思路，让我对动态规划加深了理解。<br>&emsp;&emsp;②初解此题：<br>&emsp;&emsp;最开始解这个题的时候，是按照 dp 的思路去思考的，但是由于对 dp 的造诣和理解太浅，写出了递归穷举所有情况的一种思路，毫无疑问，当事例过于复杂的时候就是因递归导致入栈过深导致 <strong>超时</strong> 或者 更恶劣的情况就是<strong>栈溢出</strong>了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 递归穷举所有结果，并且会产生重复冗余</span></span><br><span class="line"><span class="comment">* index:当前下标</span></span><br><span class="line"><span class="comment">* amount:总计次数</span></span><br><span class="line"><span class="comment">* count:总金额</span></span><br><span class="line"><span class="comment">* currentCount:当前累加的金额数</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> index, <span class="keyword">int</span> amount,<span class="keyword">int</span> count,<span class="keyword">int</span> currentCount)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当前金额小于总金额</span></span><br><span class="line">    <span class="keyword">if</span> (currentCount &lt; count)&#123;</span><br><span class="line">        <span class="comment">//考虑这是加到最后一个数</span></span><br><span class="line">        <span class="keyword">if</span> (index == array.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> solution(array, index, amount + <span class="number">1</span>, count, currentCount + array[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 最小值由三种情况组成:</span></span><br><span class="line"><span class="comment">        * 1.根据数组下标依次相加</span></span><br><span class="line"><span class="comment">        * 2.单个数组下标自身相加</span></span><br><span class="line"><span class="comment">        * 3.不考虑当前数组下标</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 通过递归穷举以上所有结果，找到一个最小值即满足题目要求</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">int</span> min = Math.min(<span class="comment">/**情况1**/</span>solution(array, index + <span class="number">1</span>, amount + <span class="number">1</span>, count, currentCount + array[index]),<span class="comment">/**情况2**/</span>solution(array, index, amount + <span class="number">1</span>, count, currentCount + array[index]));</span><br><span class="line">        <span class="keyword">return</span> Math.min(min,<span class="comment">/**情况3**/</span>solution(array,index + <span class="number">1</span>,amount,count,currentCount));</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (currentCount == count)&#123;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//不满足条件返回最大值</span></span><br><span class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;说实话，就连我自己今天再看一遍自己的代码，都要思考好久…，因为这也是磕磕绊绊才写出来的，所以，阅读性强的代码那一定是思路清晰才能够写得出来的。<br>&emsp;&emsp;②让我们再看看同样是穷举所有情况的递归代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (amount == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="comment">//超出金额</span></span><br><span class="line">        <span class="keyword">if</span> (amount - array[i] &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> subProb = solution(array, amount - array[i]);</span><br><span class="line">            <span class="keyword">if</span> (subProb == -<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">            ans = Math.min(ans, subProb + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans == Integer.MAX_VALUE ? -<span class="number">1</span> : ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;好的代码是简单清晰的，而上面就是一个很好的例子。<br>&emsp;&emsp;那么让我们来看看上面的代码产生超时的原因吧，如下图所示:<br>&emsp;&emsp;<strong>例子: 硬币面值:[1,2,5]，总金额:11。</strong><br><img src="http://tie.027cgb.com/622253/leetCode/322/TIM%E6%88%AA%E5%9B%BE20190702164011.png" alt="递归细节"><br>&emsp;&emsp;那么根据上图我们需要两个5元+一个1元三块硬币获得11元的总金额。但是通过递归产生了太多重复计算了(红色圈住的),这就是耗时的原因，所以我们应该通过一个数组(<strong>备忘录</strong>)来记录每种金额的最优组合，当更大的金额需要求最优组合时便可以借助此数组。<br>&emsp;&emsp;③带有备忘录的解法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 带有备忘录的递归算法,自顶向下</span></span><br><span class="line"><span class="comment">* memo:存放每种金额的最优解</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> amount,<span class="keyword">int</span>[] memo)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (amount == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (memo[amount] != -<span class="number">2</span>) <span class="keyword">return</span> memo[amount];</span><br><span class="line">    <span class="keyword">int</span> ans = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> coin : array)&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount - coin &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> sub = solution(array,amount - coin,memo);</span><br><span class="line">        <span class="keyword">if</span> (sub == -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        ans = Math.min(ans,sub + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    memo[amount] = (ans == Integer.MAX_VALUE) ? -<span class="number">1</span> : ans;</span><br><span class="line">    <span class="keyword">return</span> memo[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;计算过的结果直接从数组中找，从而去掉了第一种重复计算的时间，但是这种方式在leetCode上已经不会出现超时了，但是它的每个子结构的计算过程依然很复杂。<br>&emsp;&emsp;如图 memo 备忘录数组的好处:<br>&emsp;&emsp;④动态规划:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态规划，自低向上</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solution1</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> amount)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.length; i++)&#123;</span><br><span class="line">        dp[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; amount; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> coin : array)&#123;</span><br><span class="line">            <span class="keyword">if</span> (coin &lt;= i)&#123;</span><br><span class="line">                dp[i] = Math.min(dp[i],dp[i - coin] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount] &gt; amount ? - <span class="number">1</span> : dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;如图动态规划求最优解的过程:<br><img src="http://tie.027cgb.com/622253/leetCode/322/TIM%E6%88%AA%E5%9B%BE20190702170351.png" alt="备忘录数组"><br>&emsp;&emsp;通过总金额为1和5的最优解得到总金额为11的最优解、通过总金额为3的最优解得到总金额为6的最优解。这便是动态规划的思想，层层递进、一步一步的不含一点冗余。<br>&emsp;&emsp;总结：通过慢慢的做题、一行一行的去理解别人的代码和对代码的解释，我终于是对动态规划有了更多的认识，我认为一个知识不是看一遍或者背一遍就能理解的，而是需要大量的思考和验证才能真正去了解一个知识，这是我这道题做完最大的感受！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;写在前头：以前学习数据结构与算法，太囫囵吞枣，要么简单的直接按自己的思路写出来，然后就不再想看优秀的解法，要么就直接看解法，模仿的过一遍，也就有一些临时记忆。这便会产生一种错觉，感觉自己在短时间内学会了这个算法，其实不然，可能在过几天
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://yoursite.com/2019/06/24/%E5%AF%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E6%80%9D%E8%80%83%E4%B9%8B%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2019/06/24/对技术的思考之网络/</id>
    <published>2019-06-24T02:52:29.000Z</published>
    <updated>2019-07-14T14:02:46.142Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-协议"><a href="#一-协议" class="headerlink" title="一.协议"></a>一.协议</h3><p>1.应用层协议：<br>&emsp;&emsp;①HTTP(HypearText Transfer Protocol,超文本传输协议)：是一种需要一些机制去保持状态、面向C/S系统的基于TCP的网络协议。<br>&emsp;&emsp;②DNS(Domain Name System,域名系统):该协议可对访问者的域名地址解析成IP地址，然后通过准确的IP地址去访问指定的服务器。<br>&emsp;&emsp;③SMTP(Simple Mail Transfer Protocol,简单邮件传输协议):邮件服务通常使用该协议。<br>&emsp;&emsp;④FTP(File Transfer Protocol,文件传输协议):顾名思义，系统与系统之间传输文件的协议。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-协议&quot;&gt;&lt;a href=&quot;#一-协议&quot; class=&quot;headerlink&quot; title=&quot;一.协议&quot;&gt;&lt;/a&gt;一.协议&lt;/h3&gt;&lt;p&gt;1.应用层协议：&lt;br&gt;&amp;emsp;&amp;emsp;①HTTP(HypearText Transfer Protocol,超文本
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://yoursite.com/2019/06/24/%E5%AF%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E6%80%9D%E8%80%83%E4%B9%8B%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/06/24/对技术的思考之算法/</id>
    <published>2019-06-24T00:44:40.000Z</published>
    <updated>2019-07-14T14:02:56.880Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;<strong>写在前头：以前学习数据结构与算法，太囫囵吞枣，要么简单的直接按自己的思路写出来，然后就不再想看优秀的解法，要么就直接看解法，模仿的过一遍，也就有一些临时记忆。这便会产生一种错觉，感觉自己在短时间内学会了这个算法，其实不然，可能在过几天你连这个算法的思路都说不清楚。所以现在这个板块便记录自己每次学习的算法，做一个总结，也为了以后如果忘记了可以当作笔记查阅。</strong><br>1.堆排序(以大顶堆为例)<br>&emsp;&emsp;(1).堆排序简介：<br>&emsp;&emsp;堆排序是一个<strong>时间复杂度为O(nlog2n)</strong>(初始化堆的次数n(几个排序的数字初始化堆几次) × 建堆的过程 log2n(找最大数字的过程))、<strong>空间复杂度为O(1)</strong>(排序过程并不需要新的空间来存储数据)以及<strong>非稳定</strong>(建堆的过程可能会改变两个相同数字的相对位置)的排序算法。<br>&emsp;&emsp;(2).堆排序对数据结构的要求：<br>&emsp;&emsp;堆排序在排序过程中必须维护一个<a href="https://blog.csdn.net/qq_22642239/article/details/80774013" target="_blank" rel="noopener">完全二叉树</a>.我们使用数组来模拟堆，并以下标的方式来构建父节点与子节点存在的物理关系。<br>&emsp;&emsp;(3).堆排序详解<br>&emsp;&emsp;①建立初始堆：从最后一个非叶子节点的父节点开始(计算方式：(数组的长度 - 1 / 2 )- 1)，当前父节点与两个子节点进行大小比较，最大的节点应被交换到父节点位置，这一比较过程应从最后一个父节点到根节点，所以是<strong>自下而上</strong>的。<br>&emsp;&emsp;②构造顺序序列：把当前根节点的值和最后一个叶子节点进行交换，这时数组长度减一(叶子节点减一)，因为已交换的数字已经排序过。交换过后的堆已不满足大顶堆，因为根节点的值已不是最大值，所以这时的比较操作是从根节点到最后一个父节点，这是一个<strong>自上而下</strong>的过程。这样的构造排序的过程应维持到仅仅只有最后一个根节点。<br>&emsp;&emsp;(4).堆排序代码(Java)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 杨康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>: DataStructuresAndAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>:sort</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/23 12:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 堆排序</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第一步应建立初始堆，这是唯一一个自下而上的过程</span></span><br><span class="line">        buildHeap(array);</span><br><span class="line">        <span class="keyword">int</span> length = array.length;</span><br><span class="line">        <span class="comment">//第二步是构造顺序序列的过程，并且应该不停的构建大顶堆，直到仅剩一个根节点</span></span><br><span class="line">        <span class="keyword">while</span> (length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//构建顺序序列</span></span><br><span class="line">            swap(array,<span class="number">0</span>,length - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//数组长度减一(当前叶子是已排序的节点，所以应该减去)</span></span><br><span class="line">            length--;</span><br><span class="line">            <span class="comment">//构建大顶堆</span></span><br><span class="line">            heapfy(array,<span class="number">0</span>,length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建堆</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapfy</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对于最开始的建堆来说，只是比较当前父节点与其左右子节点的值</span></span><br><span class="line">        <span class="comment">//对于后续交换根节点之后从根节点开始自上而下的比较时，就需要将根节点值一直进行比较直到它到合适的位置</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//当前父节点的左子节点，如果根节点是从下标1开始的，那么左子节点为 2 * start，如果根节点是从下标0开始的，那么左子节点为 2 * start + 1.</span></span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">2</span> * start + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//当前父节点的右子节点，如果根节点是从下标1开始的，那么右子节点为 2 * start + 1，如果根节点是从下标0开始的，那么右子节点为 2 * start + 2.</span></span><br><span class="line">            <span class="keyword">int</span> right = <span class="number">2</span> * start + <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//当前被交换后节点的最大值</span></span><br><span class="line">            <span class="keyword">int</span> maxPosition = start;</span><br><span class="line">            <span class="keyword">if</span> (left &lt; length &amp;&amp; array[left] &gt; array[maxPosition])&#123;</span><br><span class="line">                maxPosition = left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right &lt; length &amp;&amp; array[right] &gt; array[maxPosition])&#123;</span><br><span class="line">                maxPosition = right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明父节点本身是或经过交换后已经是最大值，所以不需要再次进行交换</span></span><br><span class="line">            <span class="keyword">if</span> (maxPosition == start)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = array[maxPosition];</span><br><span class="line">                array[maxPosition] = array[start];</span><br><span class="line">                array[start] = temp;</span><br><span class="line">                <span class="comment">//这一步对于自上而下的构建来说相当重要，这会将比较操作继续进行下去直到越界或者已满足堆的条件</span></span><br><span class="line">                start = maxPosition;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自低向上建堆</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//计算最后一个含有叶子节点的父节点: array.length - 1 / 2 - 1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = ( array.length - <span class="number">1</span> / <span class="number">2</span> )- <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            heapfy(array,i,array.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;(4).堆排序的优点及缺点：<br>&emsp;&emsp;优点:无论怎么的序列在通过堆排序的方式进行排序之后，它的时间复杂度都是O(n*log2n),并且不需要耗费额外的空间，这可以说是排序算法中时间和空间都最优秀的算法了。<br>&emsp;&emsp;缺点：维护堆的过程相对麻烦，因为在面对增删改数据的过程都需要去维护。<br>&emsp;&emsp;(5).学习堆排序的后续:<br>&emsp;&emsp;这次堆排序的学习是因为在面试一家公司的时候，一位面试官让我通过堆排序去对快排的时间复杂度去做解释，这才让我想把堆排序再重新好好的学习一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;写在前头：以前学习数据结构与算法，太囫囵吞枣，要么简单的直接按自己的思路写出来，然后就不再想看优秀的解法，要么就直接看解法，模仿的过一遍，也就有一些临时记忆。这便会产生一种错觉，感觉自己在短时间内学会了这个算法，其实不然，可能在过几天
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>面试总结</title>
    <link href="http://yoursite.com/2019/06/24/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/06/24/面试总结/</id>
    <published>2019-06-24T00:44:24.000Z</published>
    <updated>2019-07-14T14:02:31.280Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-新蛋面试"><a href="#一-新蛋面试" class="headerlink" title="一.新蛋面试"></a>一.新蛋面试</h3><p>&emsp;&emsp;此次面试是在4月8日接到HR小姐姐的面试通知(简历在拉钩网投递),然后没想到的是直接让我去成都面试，我以为的流程应是先网络笔试或面试，因为这样可能对于面试者来说成本要低，而且双方都方便，因为如果现面面试者失败…,所以在电话通知了之后，就利用那离面试前的几天的时间好好的准备了一番，然后在4月13日也就是星期六的时候买了早早的票(8点的票，1点面试)。青城山到成都高新区的距离也就2个小时的时间，由于总担心会延误或是会出意外，所以我在10点就基本已经到了新蛋的工作区了…到了新蛋之后，工作区总的来说还是蛮好的，然后在门口值班的小姐姐也好漂亮的，虽说是1点才开始笔试面试，但是由于我到的比较早，所以就把笔试题给我让我先做了，令我诧异的是竟然只有一道编程题，而且难度中偏低，一道简单的利用双指针就可以解决的题(一拿到手想的开辟一个数组空间存重复的值..但感觉这样做过于鸡肋，然后想到的就是双指针，更好的方式就不晓得了..)，所以也是非常顺利的就做出来了，只是在完成后发现少了边界条件的判断而重新再抄了一遍..做完之后就去吃了饭，中途一直等到1点面试官就如约而至的来了。然后面试官也很随和(公司的架构师)，没有什么架子和压迫感.面试流程也和我在一些网站看的大同小异吧。开始是自我介绍，结束时反问问题。总体来说我答的感觉不是令我自己很满意，但是每个点基本都答了很多内容，毕竟还是有点紧张的..交流的过程还是很舒服轻松的。下面是问题内容:<br>    &emsp;&emsp;1.反射(问到了作用，java为什么会有反射，反射的性能和如何优化反射)<br>    &emsp;&emsp;2.gc和内存模型<br>    &emsp;&emsp;3.synchronized和valatile。(说了sync的原子性和可见性，以及作用域，valatile说了可见性，和它是如何保持可见的：利用内存屏障、缓存刷新)<br>    &emsp;&emsp;4.问了问背包(面试官竟然说不知道背包–，我是在算法那本书上看到的..)<br>    &emsp;&emsp;5.聊了聊spring的IOC,AOP的作用和一些简单的原理<br>    &emsp;&emsp;6.mysql和redis(mysql主要说了一下事务隔离机制和事务，其实还有好多没说..索引及运用等等..，redis就知道它是个非关系性数据库以及依靠缓存的快速查询机制…)<br>    &emsp;&emsp;7.说说设计模式(主要说了框架中的三大设计模式：单例、代理、工厂)<br>    &emsp;&emsp;总的来说，感觉面试官没问多少问题..但是还是稍有难度，我很诧异的是他竟然没有问Java(主要可能是因为面试官可能是C#架构师…)、网络相关以及数据结构和算法等等，其实我还是有点想去应对这些问题的。一面完了之后就是HR小姐姐的二面了，全程聊的很开心，主要就问了一些学校经历，对自己的看法和未来的薪资等，然后当面也拿到了口头offer，并且在5月份会发实体offer.<br>&emsp;&emsp;其实此次面试还是很开心的，薪资待遇和工作环境都比较满意…唯一让我觉得不好的一点就是公司主要以C#作为主开发语言，进入公司需要培训学习C#…所以接下来我肯定是需要继续努力投递java开发相关的公司…虽说一个优秀的程序员不应该被束缚在一种语言中，但是我还是很喜欢java，以及我已经付出了很多时间来学习它了，也感受到了java的魅力所在..这第一次就成功的offer也让我有了一个很好的底子，所以，继续加油！！</p><h3 id="二-阿里电话面"><a href="#二-阿里电话面" class="headerlink" title="二.阿里电话面"></a>二.阿里电话面</h3><p>&emsp;&emsp;匆忙！匆忙！匆忙！这是我面试完脑子蹦出的第一个词.如果说就吞吞吐吐思路不清知识点不明了的回答就可以进入像阿里这种量级的互联公司的话，那谁还不是个架构师呢？<br>&emsp;&emsp;就在4月13号当我面试完新蛋公司感觉还蛮顺利之后，我以为面试真的就是这么简单…和面试官畅谈风声..然后结束给个口头offer，一切看起来这么轻松愉快…其实不然，今天的阿里面试，让我知道了知己知彼，才能百战百胜…如果你连准都没准备好就去迎接一场挑战，那么大概率的会是一个不满的结果！所以这是一次教训也是一次成长，为每次的不足做个记录，慢慢弥补空缺，相信不久的一天我会拿到满意的offer。<br>&emsp;&emsp;今天(4.30日)19：45我接到了阿里国际部一位面试官的电话面试，第一步当然是做一个自我介绍，然而这本是一个套模板的机会…却让我介绍的一点都不利索，还没有一个好的结尾，所以在这几天我一定需要有一个 <em>流利的完整的自我介绍的模板</em> ，接下来是正式的第一个问题，<strong>说说快速排序和选择排序</strong>，我大概说了快排和选择的大致思想和时间复杂度。然后他问我空间复杂度脑子卡壳没有回答上，甚至差点连选择排序都忘记了…然后问我稳定性，这期间我连<em>稳定性的定义</em>都给搞错了…第二个问题是<strong>项目介绍</strong>，我简单的介绍了一下我们学校做的专家测评系统…吞吞吐吐并不只是自我介绍，这维持了一整场面试…并且我感觉电面和现面氛围相当不一样，面试官的神情、表达以及一些动作这都是电面捕获不了的，只有通过声音交流，而且在我回答几乎所有问题的时候，面试官都一声不吭，在每次回答完都要等个5秒左右才会收到响应..这肯定也是我没回答好让面试官捕获不到结束的点…，第三个问题是<strong>找出在一天中通过IP访问网页次数最多的那个用户</strong>，但是文件大小超出内存，这个是我后面想了很久才想起先用hashmap统计相同IP的访问次数，然后再使用多路归并进行排序，最后取最大的。第四个问题是<strong>求两个非环链表的交叉节点</strong>，完全没回答上…，技术方面就到此为止了，可能是前面的回答不尽人意，所以后面面试官就直接问了我简单的问题，如 <strong>以后的规划</strong>，最近关注的新技术等等，由于前面表现的差的连锁反应，导致了后面表现也很差，回答的不好。而这次面试也就以这样一个不好的结果而结束了，虽说面试官说让我等消息但应该是凉了。面试官全程也很耐心，人很好，给我回答问题的时间，不慌不忙(应该还在公司敲代码之类的..)，结果虽然不好，但这次面试在总结了之后相信我能汲取教训，为后面大公司的面试做好准备，不至于连自己有的东西都发挥不出去！<br>&emsp;&emsp;状态：已挂</p><h3 id="三-SAP"><a href="#三-SAP" class="headerlink" title="三.SAP"></a>三.SAP</h3><p>&emsp;&emsp;1.电话面<br>&emsp;&emsp;面试时间：2019.6.13<br>&emsp;&emsp;这次面试的机会是通过在班群发布的招聘信息上发现的，因为发现公司环境不错而且日薪超高，所以投了简历，在第二天便收到了回复通知，而在今天便收到了电话，不得不说，效率相对于其他公司来说真的高好多好多，好评！很有幸面试官也是我们学校的。大致来说这次面试我表现的比较差，因为很多知识没有复习不能立马答上来。并且感觉还是得好好努力呀！<br>&emsp;&emsp;面试内容：<br>&emsp;&emsp;1.自我介绍<br>&emsp;&emsp;2.设计模式：讲了单例，代理(<strong>cglib</strong>)，<strong>工厂</strong>忘记了没说<br>&emsp;&emsp;3.<strong>类加载器</strong>：回答比较简单，没有讲清楚<br>&emsp;&emsp;4.新生代和老年代的区别：标记次数<br>&emsp;&emsp;5.标记算法：唯一答得比较满意的…<br>&emsp;&emsp;6.数据库：问了触发器和存储过程…存储过程后面用的少快忘掉了，触发器根本不了解…<br>&emsp;&emsp;7.项目：痛点..之前做的项目都过于简单，后面一定会抓一抓。<br>&emsp;&emsp;8.如何理解线程安全，锁。<br>&emsp;&emsp;面试结束面试官也给了建议让修改一下简历，因为自己简历在技术的程度上可能没有把握好所以有些写的熟练的技术却没有回答好，而且后面还鼓励了一下我，总之，还挺好的，先不论结果在过程中发现了自己后面应该关注的重点在哪里也挺好的，继续加油，努力改变自己！<br>&emsp;&emsp;状态：通过<br>&emsp;&emsp;2.现场面<br>&emsp;&emsp;面试时间：2019.6.21<br>&emsp;&emsp;电话面试回答的并不好，本以为都会直接挂了，结果17号收到了HR小姐姐的现场面试的邀请，只能说面试真的是玄学…然后好好的在实验室准备了4天，在星期五早早的就到了sap的成都分部(3点开始，1点到)，在招聘信息上就已经看到sap的环境很好，但是到了现场,那是真的好啊！！所以当时在等待的时候就决心要进这家公司了，当时不知为何信心暴增..直到面试结束…大概在三点，面试官如约而至，这期间hr小姐姐也很好，很照顾我，各种问我需要什么。然后面试过程中，是两个面试官，一个面试官是做底层工具的，一个还是实习生(但是能力真的很强，特别是算法)。<br>&emsp;&emsp;面试内容：<br>&emsp;&emsp;1.自我介绍<br>&emsp;&emsp;2.基于oracle的一种数据库(忘记名字了，好像是那个部门会用的)：不了解<br>&emsp;&emsp;3.快排：说了各种复杂度、稳定性和思想。    问为什么平均复杂度为是O(nlog2n),说了自己的想法，好像不对..<br>&emsp;&emsp;4.红黑树：不会<br>&emsp;&emsp;5.加密算法底层：会用但是不了解底层(知道MD5是哈希忘记说)<br>&emsp;&emsp;6.TCP建立连接为什么需要三次：信息对等<br>&emsp;&emsp;7.应用层协议有哪些，除了HTTP：HTTPS算吗…，DNS算一个<br>&emsp;&emsp;8.设计模式：说了单例的各种实现，代理模式的JDK动态代理，及为什么要动态代理(简述了和静态代理的区别)<br>&emsp;&emsp;9.邮件的正则：憋了好久没写出来好久没写过了..<br>&emsp;&emsp;10.xml转json:疯了..<br>&emsp;&emsp;11.优化sql，让模糊查询走索引：%匹配符不能在字符前面<br>&emsp;&emsp;12.项目介绍<br>&emsp;&emsp;13.int多少位：32位<br>&emsp;&emsp;14.启动线程的方式：Thread.start，线程池自动启动,callable<br>&emsp;&emsp;15.JUC包<br>&emsp;&emsp;16.redis<br>&emsp;&emsp;17.消息队列<br>&emsp;&emsp;18.动态规划<br>&emsp;&emsp;35分钟问了这么多问题..可想而知我答的是有多差..面完在回学校的途中自闭了2个小时(小姐姐都不想看那种),不过最后还嘚好好总结自己，刚还看到一个关于面试挂了如何调整心态的一篇贴，看到一个回复：”这种难受客观上回促进你的成长”，我觉得失败不重要，总结失败才能让下一次不至于失败得那么难看吧…总结这次面试感受，那位实习生确实很强,自己感受到了差距..然后就是面试官的问题方式以前没遇到过，面试官直接问：”你会XXX吗”,我:”我会(这时候以为会接下来问这个问题的细节)”，面试官：”好的下一个问题(哭)”，所以这种情况下应该在说了会之后，立马说会什么。还有就是回答问题一定要有条理，不要像背出来的，要让面试官感觉你是实践过的，最后用过的技术不要写熟练,要自己能知道那个技术的底层才行。最后最后，加油就完事！<br>&emsp;&emsp;状态：等通知</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-新蛋面试&quot;&gt;&lt;a href=&quot;#一-新蛋面试&quot; class=&quot;headerlink&quot; title=&quot;一.新蛋面试&quot;&gt;&lt;/a&gt;一.新蛋面试&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;此次面试是在4月8日接到HR小姐姐的面试通知(简历在拉钩网投递),然后没想到的是直接
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://yoursite.com/2019/06/18/%E5%AF%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E6%80%9D%E8%80%83%E4%B9%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/06/18/对技术的思考之设计模式/</id>
    <published>2019-06-18T07:45:03.000Z</published>
    <updated>2019-07-14T14:03:04.465Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一.代理模式</strong><br>&emsp;&emsp;1.代理模式的开始<br>&emsp;&emsp;最开始学习代理模式的时候是为了学习设计模式而学习的代理模式，这样的学习不结合对技术应用的了解很快便会忘记，而后学习了spring框架，这下代理模式的重点应用就来啦！那就是AOP，哇，spring的一大核心呀，说明代理模式真正的是提供了好大的作用！在spring框架当中，默认会使用的代理方式是JDK代理。如果代理的是类而非接口的话就以CGLIB的方式实现代理。<br>&emsp;&emsp;2.代理模式的三种常用实现方式<br>&emsp;&emsp;①对静态代理的思考：<br>&emsp;&emsp;静态代理，顾名思义，在编译器编译完成时，便生成了一个代理对象。原理也很简单，代理类实现接口，在代理方法中做一些额外的处理。静态代理的好处便是，原理简单，编写简单，处理少量的代理类或者是不易改变的代理对象比较适用，但是仔细想一想，如果是会需要大量的代理对象的产生，而且会产生业务改变，那么维护的情况就是…打开第一个类修改代理逻辑、打开第二个类修改代理逻辑，打开第n个类修改代理逻辑…总而言之，维护成本太高啦！<br>&emsp;&emsp;②对JDK动态代理的思考：<br>&emsp;&emsp;JDK动态代理，是一种字节码代理方式，即原生的类已经编译成为 .class 文件在 JVM 中生成代理类的方式。主要实现方式是为需要产生代理业务实现 InvocationHandler 类中的 invoke 方法。然后使用 Proxy 类的 newInstanceProxy() 静态方法，传入类加载器和指定接口类以及实现 InvocationHandler 类的那个类。这样你需要代理的类在使用代理方法的时候就可以在无意之中产生代理类啦！通过 newInstanceProxy() 中的第二个参数我们可以知道，该代理方式是面向接口代理的，所以，它的缺点便是如果你想代理的类是一个单纯的类，那么不好意思，此代理方式不可用！JDK 动态代理的优点呢就是他是 JDK 默认支持的，所以不需要三方jar包，然后耦合度也很低，被代理的类完全不知道代理类的存在，在业务变更时也只需要对代理类进行修改，大大减少了维护成本。<br>&emsp;&emsp;③对 CGLIB 代理的思考：<br>&emsp;&emsp;最强大的一般都是作为压轴的出现，CGLIB代理方式解决了 JDK动态代理不能面向类的局限。<br><strong>二.工厂模式</strong><br>&emsp;&emsp;1.简单工厂模式：<br>&emsp;&emsp;今天又一次的学习了简单工厂才知道，这一种工厂模式并不属于设计模式，但是由于其设计简单并且符合基本的 OO设计思想，所以也大量被沿用。简单工厂模式即把一类相同类型的事物创建过程给抽象到了一个工厂中了，在用户想获取指定事物便可通过关键字向工厂中拿取。所以，这很好的屏蔽了实现的细节。那么在没有工厂的时候呢？用户需要什么，要自己创建，这就产生了一定的耦合，不利于后期维护，且即不符合<strong>面向接口而非面向实现的设计原则</strong>，也不符合<strong>开闭原则</strong>。虽然简单工厂有这么多好处，但是由于后期可能会有增加的操作的时候，所以也会增加指定的类和在工厂中增加代码。<br>&emsp;&emsp;2.抽象工厂模式：<br>&emsp;&emsp;这可是<strong>真正的工厂模式</strong>哟，而且相较简单工厂和工厂方法来说，抽象工厂考虑的更健全，它是工厂的工厂。在简单工厂和工厂方法中，创建的事物单一，而抽象工厂就不一样了，它可以更了解用户的需求，对更多的事物进行组合。可以进行更多的搭配。例如在简单工厂中，你只能点一杯卡布奇诺，而在抽象工厂中，你除了可以点一杯卡布奇洛还可以加糖啦！所以更丰富的支持也才能满足现如今丰富的需求！缺点也是会可能后期会存在很多增加的情况，且代码相对复杂。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;一.代理模式&lt;/strong&gt;&lt;br&gt;&amp;emsp;&amp;emsp;1.代理模式的开始&lt;br&gt;&amp;emsp;&amp;emsp;最开始学习代理模式的时候是为了学习设计模式而学习的代理模式，这样的学习不结合对技术应用的了解很快便会忘记，而后学习了spring框架，这下代理模式
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术学习" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>配置冗余、tom猫和Shiro的一些问题</title>
    <link href="http://yoursite.com/2019/05/24/%E8%BF%91%E6%9C%9F%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98-%E9%85%8D%E7%BD%AE%E5%86%97%E4%BD%99%E3%80%81tom%E7%8C%AB%E5%92%8CShiro/"/>
    <id>http://yoursite.com/2019/05/24/近期遇到的一些问题-配置冗余、tom猫和Shiro/</id>
    <published>2019-05-24T14:46:10.000Z</published>
    <updated>2019-07-14T14:03:13.794Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;写在前头：这次的博客主要是记录我在学习spring集成shiro框架时产生的一些问题，这包括xml配置文件的问题、tomcat的问题、以及产生的一些玄学问题。<br>&emsp;&emsp;1.对冗余的0容忍：<br>&emsp;&emsp;在之前的springMVC-servlet.xml的配置文件我是这样配置的：<br><img src="http://kan.027cgb.com/622253/TIM%E6%88%AA%E5%9B%BE20190523103451.png" alt="之前的配置"><br>&emsp;&emsp;其实应该只需要这样:<br><img src="http://kan.027cgb.com/622253/TIM%E6%88%AA%E5%9B%BE20190523104413.png" alt="现在的配置"><br>&emsp;&emsp;即可解决springMVC的核心控制组件dispathcerServlet对控制器的控制选择和分发处理。因为<a href="mvc:annotation-driven/" target="_blank" rel="noopener">mvc:annotation-driven/</a>配置相当于已经注册了请求的监听器和映射器。所以要是再把这个映射器和监听器写入配置文件就会产生性能和配置文件不简洁的坏处。<br>&emsp;&emsp;2.tomcat的经典异常：<br><img src="http://kan.027cgb.com/622253/TIM%E6%88%AA%E5%9B%BE20190523104956.png" alt="tom猫经典异常"><br>&emsp;&emsp;这个问题可追溯到我最开始学习框架的时候，仿佛只要一个路径不对、一点问题的错误tomcat就会告诉你部署错误部署错误，让你看日志看日志！这就好像在你学习的开始tomcat就警告过你了，程序员不好当，现在退出还来得及！哈哈。由于我每一次都是不理睬它的看日志警告，太注重于部署错误的表面意思，我就不停的配置项目本身，重写打war包，重写将war包发布到tomcat，而忘记了项目本身的问题。终于在这几天实在忍受不了这种模模糊糊的感觉而发现了原来在idea server窗口的左边就是Tomcat Localhost Log…即一个按钮可呈现出项目问题根源所在..而我却胡乱倒腾..方式很重要!<br>&emsp;&emsp;tomcat日志:<br><img src="http://kan.027cgb.com/622253/TIM%E6%88%AA%E5%9B%BE20190523105915.png" alt="本地日志信息"><br>&emsp;&emsp;所以，有问题找日志，这就将模糊问题更加细化，从而追根溯源，得以快速解决。<br>&emsp;&emsp;3.已放弃的玄学问题：<br>&emsp;&emsp;在使用shiro做权限管理的时候，会存在将用户信息存入缓存的情况，而shiro使用的缓存框架是ehcache。而当我集成的时候却出现了这样的一个问题：<br><img src="http://kan.027cgb.com/622253/TIM%E6%88%AA%E5%9B%BE20190523110519.png" alt="encache异常"><br>&emsp;&emsp;这个问题让我换了千千万万的ehcache jar依赖、换maven版本以及做其他依赖妥协..可是这个异常依旧稳如山…最后的解决方案是使用别人成品项目的配置，但是环境几乎和我自己搭建的没什么太大的区别，所以也是没有找到问题的根源所在。<br>&emsp;&emsp;问题的出现是好事情，因为这可以让你更加深刻的理解技术和理清思路，但找到问题的好的解决方案也才能高效率解决问题，要不然会大量巡查和解决问题的时间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;写在前头：这次的博客主要是记录我在学习spring集成shiro框架时产生的一些问题，这包括xml配置文件的问题、tomcat的问题、以及产生的一些玄学问题。&lt;br&gt;&amp;emsp;&amp;emsp;1.对冗余的0容忍：&lt;br&gt;&amp;emsp;&amp;emsp;在之前的
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>leetcode第752题-打开转盘锁</title>
    <link href="http://yoursite.com/2019/03/15/leetcode-752-%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/"/>
    <id>http://yoursite.com/2019/03/15/leetcode-752-打开转盘锁/</id>
    <published>2019-03-14T16:00:00.000Z</published>
    <updated>2019-07-14T14:03:19.280Z</updated>
    
    <content type="html"><![CDATA[<pre><code>打开转盘锁，是一个利用BFS探索最短路径的一道算法题。    1.题目内容：    你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos; 。每个拨轮可以自由旋转：例如把 &apos;9&apos; 变为  &apos;0&apos;，&apos;0&apos; 变为 &apos;9&apos; 。每次旋转都只能旋转一个拨轮的一位数字。    锁的初始数字为 &apos;0000&apos; ，一个代表四个拨轮的数字的字符串。    列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。    2.思路：    根据题目描述能够看出来这是一道很明显利用BFS去求最短路径的题。首先，这个题需要解决的难点在于：    ①如何找到每一个当前锁值的所有下一步路径。(目的在于确定每一步能产生的所有锁情况)：    利用循环遍历当前锁值的每一个字符位置。判断该位置字符的数字大小，因为每一步能产生的操作只能是+1或-1，对每一个字符产生一个+1操作和一个-1操作。但小心特殊情况！当该字符为9时，它的正向操作的下一步结果为0！而当该字符为0时，它的反向操作的下一步结果为9！    ②如何筛选出重复产生的锁值(利用Set集合的特性)    ③如何绕过deadends死亡数字(deadends数组的作用在于阻断路线，所以当锁值是死亡数字之后，排除即可)。    3.代码及解析：    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.StringBuilder;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 思路：运用BFS的思想，进行每一层的检索.限制条件：deadends死锁路径限制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">openLock</span><span class="params">(String[] deadends, String target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将deadends死锁的值存入set进行去重处理以及后续判断</span></span><br><span class="line">        Set&lt;String&gt; sets = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(deadends));</span><br><span class="line">        <span class="comment">//判断target是否存在deadends死锁中，如果存在，直接死锁</span></span><br><span class="line">        <span class="comment">//判断'0000'是否存在在死锁中，如果存在，起步则死锁</span></span><br><span class="line">        <span class="keyword">if</span>(sets.contains(target) || sets.contains(<span class="string">"0000"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//去除重复的队列，只有不存在在此队列里的路径才能进入下一层</span></span><br><span class="line">        Set&lt;String&gt; removeDuplication = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="comment">//需要处理的当前层</span></span><br><span class="line">        Queue&lt;String&gt; currentLayer = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//处理当前层时需要将当前层的邻居放入的位置，也就是若当前层没有找到正确的锁值，接下来访问的一层</span></span><br><span class="line">        Queue&lt;String&gt; nextLayer = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//记录步数</span></span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//放入锁的起始值'0000'</span></span><br><span class="line">        currentLayer.offer(<span class="string">"0000"</span>);</span><br><span class="line">        <span class="comment">//如果当前层没有值，说明锁的全路径已经遍历完。找不到的原因是因为死锁的路径被封死。</span></span><br><span class="line">        <span class="keyword">while</span>(!currentLayer.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//按顺序取出当前层的每一个锁，尝试打开</span></span><br><span class="line">            String currentLock = currentLayer.poll();</span><br><span class="line">            <span class="comment">//当前拨弄的锁值是否可以解锁，如果可解锁即开锁成功。</span></span><br><span class="line">            <span class="keyword">if</span>(currentLock.equals(target))&#123;</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前锁值的所有邻居</span></span><br><span class="line">            Queue&lt;String&gt; lockFriend = getFriend(currentLock);</span><br><span class="line">            <span class="keyword">for</span>(String value : lockFriend)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!sets.contains(value) &amp;&amp; !removeDuplication.contains(value))&#123;</span><br><span class="line">                    <span class="comment">//将不重复的锁值路径存入判断非重复的锁值队列中</span></span><br><span class="line">                    removeDuplication.add(value);</span><br><span class="line">                    <span class="comment">//将锁值存入下一层队列</span></span><br><span class="line">                    nextLayer.offer(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前层已空，说明未找到正确的开锁值，那么为下一层开锁测试做准备</span></span><br><span class="line">            <span class="keyword">if</span>(currentLayer.isEmpty())&#123;</span><br><span class="line">                <span class="comment">//将此层锁值的邻居也就是下一层赋予当前层</span></span><br><span class="line">                currentLayer = nextLayer;</span><br><span class="line">                <span class="comment">//每一层走完所有情况+1</span></span><br><span class="line">                step++;</span><br><span class="line">                <span class="comment">//更新下一层</span></span><br><span class="line">                nextLayer = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">getFriend</span><span class="params">(String currentLock)</span></span>&#123;</span><br><span class="line">        Queue&lt;String&gt; friend = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder(currentLock);</span><br><span class="line">            <span class="comment">//取正向拨弄的锁</span></span><br><span class="line">            sb.setCharAt(i, currentLock.charAt(i) == <span class="string">'9'</span> ? <span class="string">'0'</span> : (<span class="keyword">char</span>) (currentLock.charAt(i) + <span class="number">1</span>));</span><br><span class="line">            friend.offer(sb.toString());</span><br><span class="line">            <span class="comment">//取反向拨弄的锁</span></span><br><span class="line">            sb.setCharAt(i, currentLock.charAt(i) == <span class="string">'0'</span> ? <span class="string">'9'</span> : (<span class="keyword">char</span>) (currentLock.charAt(i) - <span class="number">1</span>));</span><br><span class="line">            friend.offer(sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> friend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      分析一下BFS的经典算法
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="arithmetic" scheme="http://yoursite.com/tags/arithmetic/"/>
    
  </entry>
  
  <entry>
    <title>如何利用github+hexo建立一个静态博客</title>
    <link href="http://yoursite.com/2019/02/23/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8github-hexo%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/02/23/如何利用github-hexo建立一个静态博客/</id>
    <published>2019-02-22T20:38:00.000Z</published>
    <updated>2019-05-03T05:31:14.056Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、先说说为什么会建立这个博客："><a href="#一、先说说为什么会建立这个博客：" class="headerlink" title="一、先说说为什么会建立这个博客："></a>一、先说说为什么会建立这个博客：</h5><p>&emsp;&emsp;首先我是在一次偶然的机会在b站看到了一个程序员up主codersheep（up id:CoderSheep），然后发现up主干货满满，其中有一个视频教程《程序猿如何搭建一个属于自己的个人博客》（视频路径：<a href="https://www.bilibili.com/video/av37128014" target="_blank" rel="noopener">点击</a>），才发现原来一个静态博客是如此好搭，只需要完全跟着教程，部署环境、找模板、上传模板、最后链接服务器，就完全ok了。因为在这之前我是有考虑自己搭一个动态博客的，但由于我的技术栈是完全偏向后端的，虽说前端模板，但是还是会有改动的地方，但是由于我的前端水平…最后改动的一团糟，而且主页和博客页是是完全两种画风，导致最后我放弃了。而今发现原来静态博客是如此简易好搭还完全不需技术考虑，所以就慢慢跟着各种博文搭建大概2天（在很慢的情况下），也比较美观简易，唯一不好的是访问比较慢，网站资源少还稍微快一点，如果搭建的网站上存在图片，甚至视频时，那如果是在没缓存的情况下访问时会是相当慢的…因为这个静态博客是放在github的服务器上的，根本没有做cdn加速这些，但是要是自己平时写写博客那就够用了。其次我建立博客的初衷是为了能写一点自己学的技术的一些想法和拓展，因为之前用博客园写了好多学习笔记…虽然学习笔记也是博客的一种承载形式，但是现在更多的是想在有一定技术支持的基础上，能够拓展出不一样的东西。</p><h5 id="二、搭建博客流程："><a href="#二、搭建博客流程：" class="headerlink" title="二、搭建博客流程："></a>二、搭建博客流程：</h5><h6 id="1-环境搭建："><a href="#1-环境搭建：" class="headerlink" title="1.环境搭建："></a>1.环境搭建：</h6><p>&emsp;&emsp;需要工具：node.js（hexo需要node.js的支持）,git（上传工具），github(服务器)。<br>&emsp;&emsp;1.git下载：<br>&emsp;&emsp;<a href="https://gitforwindows.org/" target="_blank" rel="noopener">点击</a>（在没有翻墙的情况下，下载速度比较慢，可以尝试到其他地方找找资源），顺序安装即可。<br>&emsp;&emsp;2.node下载：<br>&emsp;&emsp;<a href="https://nodejs.org/en/" target="_blank" rel="noopener">点击</a>，顺序安装即可。<br>&emsp;&emsp;3.hexo下载：<br>&emsp;&emsp;在下载hexo之前，需要先创建一个hexo文件夹，用于后期存放所创建的博客文件。如果已经下载好的git之后，在桌面右击，会出现Git Bash Here的按钮，然后点击进入。在窗口输入：<br>&emsp;&emsp;npm install hexo-cli -g<br>&emsp;&emsp;然后输入：<br>&emsp;&emsp;npm install hexo –save<br>&emsp;&emsp;安装完成后，可查看版本：<br>&emsp;&emsp;hexo -v<br>&emsp;&emsp;执行init命令对hexo进行初始化操作：<br>&emsp;&emsp;hexo init<br>&emsp;&emsp;上面的步骤就完成了环境的搭建。</p><h6 id="2-服务测试："><a href="#2-服务测试：" class="headerlink" title="2.服务测试："></a>2.服务测试：</h6><p>&emsp;&emsp;hexo generate（生成静态文件） - 缩写： hexo g<br>&emsp;&emsp;hexo server (启动服务器) - 缩写：hexo s<br>&emsp;&emsp;本地访问：localhost:4000/.如果显示出来hexo的主页，那么说明环境部署成功。</p><h6 id="3-搭建github环境："><a href="#3-搭建github环境：" class="headerlink" title="3.搭建github环境："></a>3.搭建github环境：</h6><p>&emsp;&emsp;1.首先需要创建一个属于自己的github账号：<a href="github.com">地址</a>。<br>&emsp;&emsp;2.点击+号选择New repository 新创建一个仓库。在这对Resitory name有严格的要求，必须和owner的名字一致。例如：owner名字如果是codersheepyang，那么后面的名字就需要是codersheepyang.github.io，然后点击create repository一个新仓库就创建好了。<br>&emsp;&emsp;3.开启GitHub pages<br>&emsp;&emsp;打开所创建库的setting页面，找到GitHub Pages，创建即可，创建成功后，便可以通过浏览器访问owner.github.io。</p><h6 id="4-连接本地hexo和github："><a href="#4-连接本地hexo和github：" class="headerlink" title="4.连接本地hexo和github："></a>4.连接本地hexo和github：</h6><p>&emsp;&emsp;1.配置git个人信息：<br>&emsp;&emsp;①git config –system user.name “yourusername”<br>&emsp;&emsp;②git config –system user.email “<a href="mailto:youremail@163.com" target="_blank" rel="noopener">youremail@163.com</a>“<br>&emsp;&emsp;2.修改_config.yml的部分配置：<br>&emsp;&emsp;可以依照自己喜欢的风格对配置进行修改，可参考hexo的官方文档。目前主要是修改以下配置来做两者的连接：<br>&emsp;&emsp;Deployment部分：<br>&emsp;&emsp;deploy:<br>&emsp;&emsp;type: git<br>&emsp;&emsp;repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:codersheepyang/codersheepyang.github.io.git<br>&emsp;&emsp;branch：master(master作为默认分支，如需自己创建分支作为主分支修改此部分)<br>&emsp;&emsp;注意：在每个冒号后面都需要添加一个空格，要不然会对文件格式解析错误。<br>&emsp;&emsp;3.发布:<br>&emsp;&emsp;这需要以后在操作博客的三个常用指令：<br>&emsp;&emsp;①hexo clean（清除缓存文件（db.json）和已经生成的静态文件（public）。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令）<br>&emsp;&emsp;②hexo g（上面已说过）<br>&emsp;&emsp;③hexo d（部署网站）<br>&emsp;&emsp;配置ssh key：<br>&emsp;&emsp;好处:由于git使用https协议，所以在每次pull、push的时候都需要输入密码，使用git协议，使用ssh密钥，可以省去每次输入密码。<br>&emsp;&emsp;本机ssh公钥存放在本机主目录的~/.ssh目录下。可以使用cd ~/.ssh 访问，如果存在此文件，那么密钥就在id_rsa.pub文件下。(如果不存在ssh文件的话使用 ssh-keygen -t rsa -C “<a href="mailto:your_email@youremail.com" target="_blank" rel="noopener">your_email@youremail.com</a>“ 命令创建即可)，然后进入github的settings，找到SSH and GPG keys,添加刚复制的内容即可。</p><h6 id="5-选择主题"><a href="#5-选择主题" class="headerlink" title="5.选择主题"></a>5.选择主题</h6><p>&emsp;&emsp;1.下载主题<br>&emsp;&emsp;上面步骤完成之后那么说明整个博客的环境+搭建已经完成。现在就是对博客的美化阶段，你可以在hexo的官方找一个你喜欢的主题，然后进入该主题的github页面，选择Clone or download复制链接。然后在git bash界面进入安装hexo时的them路径。输入指令git clone yourcopypath。下载完成后主题就在theme文件夹里面了。<br>&emsp;&emsp;2.配置主题：<br>&emsp;&emsp;进入_config.yml文件：<br>&emsp;&emsp;找到theme<br>&emsp;&emsp;theme: 主题名(这是下载主题的文件名)，然后再输入 hexo clean、hexo g 、hexo d这三个命令即可更新线上的数据。再次打开就会显示新主题主页。</p><h5 id="三、搭建后的想法"><a href="#三、搭建后的想法" class="headerlink" title="三、搭建后的想法"></a>三、搭建后的想法</h5><p>&emsp;&emsp;看似简短的几个步骤我却用了大概10个小时才完成所有流程…因为遇到了太多的问题了，最开始教程使用不当带来的指令顺序问题，然后是npm包版本依赖问题(中途自己猪修改文件名导致)，ssh key找不到的问题等等，所以再简单的东西都需要仔细的了解每一个步骤然后再进行实际的操作，要不然云里雾里都不知道自己在干什么，这样即使完成了也收获不了什么，所以以后做事一定要更仔细认真~</p>]]></content>
    
    <summary type="html">
    
      这篇博文讲述hexo博客网站创建的大致流程
    
    </summary>
    
      <category term="site" scheme="http://yoursite.com/categories/site/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
